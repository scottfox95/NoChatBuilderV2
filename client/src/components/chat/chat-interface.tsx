import { useState, useEffect, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { nanoid } from "nanoid";
import { apiRequest } from "@/lib/queryClient";
import { Message } from "@shared/schema";
import ChatMessage from "./chat-message";
import ChatInput from "./chat-input";
import { Loader } from "@/components/ui/loader";
import { Separator } from "@/components/ui/separator";

interface ChatInterfaceProps {
  chatbotSlug: string;
  isPreview?: boolean;
  previewSystemPrompt?: string;
}

interface ChatbotPublicInfo {
  id: number;
  name: string;
  description: string;
  model: string;
  suggestedQuestions?: string[];
}

interface ChatResponse {
  message: Message;
  sessionId: string;
}

export default function ChatInterface({ chatbotSlug, isPreview = false, previewSystemPrompt }: ChatInterfaceProps) {
  const [sessionId, setSessionId] = useState<string>("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputDisabled, setInputDisabled] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Get chatbot information
  const { data: chatbotInfo, isLoading: isLoadingChatbot, error: chatbotError } = useQuery<ChatbotPublicInfo>({
    queryKey: [`/api/public/chatbot/${chatbotSlug}`],
    enabled: !isPreview && !!chatbotSlug,
  });

  // Load previous messages if sessionId exists
  const { data: previousMessages } = useQuery<Message[]>({
    queryKey: [`/api/public/chatbot/${chatbotSlug}/messages/${sessionId}`],
    enabled: !isPreview && !!sessionId && !!chatbotSlug,
  });

  // Message sending mutation
  const messageMutation = useMutation({
    mutationFn: async (message: string) => {
      if (isPreview) {
        try {
          // Make a direct call to OpenAI for preview mode
          const response = await apiRequest(
            "POST",
            "/api/preview/generate-response",
            { 
              message,
              systemPrompt: previewSystemPrompt || "You are a helpful AI assistant that responds to users in a friendly and informative way."
            }
          );
          const data = await response.json();
          
          return {
            message: {
              id: Date.now(),
              chatbotId: 0,
              sessionId: "preview",
              isUser: false,
              content: data.response,
              timestamp: new Date(),
            },
            sessionId: "preview"
          } as ChatResponse;
        } catch (error) {
          // Fallback if the API call fails
          return {
            message: {
              id: Date.now(),
              chatbotId: 0,
              sessionId: "preview",
              isUser: false,
              content: "I couldn't generate a response. This is a preview of your chatbot configuration. In the deployed version, responses will be generated by OpenAI.",
              timestamp: new Date(),
            },
            sessionId: "preview"
          } as ChatResponse;
        }
      } else {
        const response = await apiRequest(
          "POST", 
          `/api/public/chatbot/${chatbotSlug}/messages`, 
          { message, sessionId }
        );
        return await response.json();
      }
    },
    onSuccess: (data: ChatResponse) => {
      if (!sessionId) {
        setSessionId(data.sessionId);
      }
    },
    onError: (error) => {
      // Add error message to chat
      setMessages(prev => [
        ...prev,
        {
          id: Date.now(),
          chatbotId: 0,
          sessionId: sessionId || "error",
          isUser: false,
          content: "Sorry, there was an error processing your message. Please try again.",
          timestamp: new Date(),
        }
      ]);
    },
    onSettled: () => {
      setInputDisabled(false);
    }
  });

  // Initialize session on first load
  useEffect(() => {
    if (!isPreview && !sessionId) {
      setSessionId(nanoid());
    }
  }, [isPreview, sessionId]);

  // Update messages when previousMessages changes
  useEffect(() => {
    if (previousMessages && previousMessages.length > 0) {
      setMessages(previousMessages);
      // If there are previous messages, don't show suggestions
      setShowSuggestions(false);
    }
  }, [previousMessages]);

  // Add welcome message for preview mode
  useEffect(() => {
    if (isPreview && messages.length === 0) {
      setMessages([
        {
          id: 0,
          chatbotId: 0,
          sessionId: "preview",
          isUser: false,
          content: "Hello! I'm your chatbot assistant. How can I help you today?",
          timestamp: new Date(),
        }
      ]);
    }
  }, [isPreview, messages.length]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = async (message: string) => {
    if (!message.trim() || inputDisabled) return;
    
    // Add user message to UI immediately
    const userMessage: Message = {
      id: Date.now(),
      chatbotId: chatbotInfo?.id || 0,
      sessionId: sessionId || "preview",
      isUser: true,
      content: message,
      timestamp: new Date(),
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputDisabled(true);
    
    // Hide suggestions after the first message is sent
    setShowSuggestions(false);
    
    try {
      const response = await messageMutation.mutateAsync(message);
      setMessages(prev => [...prev, response.message]);
    } catch (error) {
      // Error is handled in the mutation
    }
  };
  
  const handleSuggestedQuestionClick = (question: string) => {
    if (inputDisabled) return;
    handleSendMessage(question);
  };

  if (!isPreview && isLoadingChatbot) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader size="lg" withText text="Loading chatbot..." />
      </div>
    );
  }

  if (!isPreview && chatbotError) {
    return (
      <div className="flex flex-col items-center justify-center h-full p-4 text-center">
        <h3 className="text-lg font-semibold text-red-500 mb-2">Chatbot not found</h3>
        <p className="text-neutral-400">The chatbot you're looking for doesn't exist or has been removed.</p>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full overflow-hidden bg-background-light rounded-lg">
      {/* Chat Header */}
      <div className="p-4 border-b border-neutral-800">
        <h3 className="font-medium text-white">
          {isPreview ? "Chatbot Preview" : chatbotInfo?.name}
        </h3>
        {!isPreview && chatbotInfo?.description && (
          <p className="text-sm text-neutral-400 mt-1">{chatbotInfo.description}</p>
        )}
      </div>
      
      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar">
        {messages.map((message) => (
          <ChatMessage key={message.id} message={message} />
        ))}
        <div ref={messagesEndRef} />
        
        {/* Loading indicator for response */}
        {inputDisabled && messageMutation.isPending && (
          <div className="flex items-start">
            <div className="flex-shrink-0 bg-primary/20 w-8 h-8 rounded-full flex items-center justify-center">
              <svg className="animate-pulse w-5 h-5 text-primary-light" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <div className="ml-3 bg-neutral-800 rounded-lg py-2 px-4">
              <div className="flex space-x-2">
                <div className="w-2 h-2 rounded-full bg-primary animate-bounce" style={{ animationDelay: "0ms" }}></div>
                <div className="w-2 h-2 rounded-full bg-primary animate-bounce" style={{ animationDelay: "150ms" }}></div>
                <div className="w-2 h-2 rounded-full bg-primary animate-bounce" style={{ animationDelay: "300ms" }}></div>
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Chat Input */}
      <div className="p-4 border-t border-neutral-800">
        {/* Suggested Questions */}
        {showSuggestions && 
          (!isPreview ? 
            (chatbotInfo?.suggestedQuestions && chatbotInfo.suggestedQuestions.length > 0) : 
            isPreview) && (
          <div className="mb-4">
            <p className="text-sm font-medium text-neutral-400 mb-2">
              Suggested questions:
            </p>
            <div className="flex flex-wrap gap-2">
              {isPreview ? (
                // Show sample suggested questions in preview mode
                <>
                  <button 
                    onClick={() => handleSuggestedQuestionClick("What services do you offer?")}
                    className="px-3 py-1.5 text-sm bg-neutral-800 hover:bg-neutral-700 text-white rounded-full border border-neutral-700 transition-colors"
                  >
                    What services do you offer?
                  </button>
                  <button 
                    onClick={() => handleSuggestedQuestionClick("How do I get started?")}
                    className="px-3 py-1.5 text-sm bg-neutral-800 hover:bg-neutral-700 text-white rounded-full border border-neutral-700 transition-colors"
                  >
                    How do I get started?
                  </button>
                  <button 
                    onClick={() => handleSuggestedQuestionClick("Can you help me with my account?")}
                    className="px-3 py-1.5 text-sm bg-neutral-800 hover:bg-neutral-700 text-white rounded-full border border-neutral-700 transition-colors"
                  >
                    Can you help me with my account?
                  </button>
                </>
              ) : (
                // Show actual suggested questions from the chatbot
                chatbotInfo?.suggestedQuestions?.map((question, index) => (
                  <button 
                    key={index}
                    onClick={() => handleSuggestedQuestionClick(question)}
                    className="px-3 py-1.5 text-sm bg-neutral-800 hover:bg-neutral-700 text-white rounded-full border border-neutral-700 transition-colors"
                  >
                    {question}
                  </button>
                ))
              )}
            </div>
          </div>
        )}
        
        <ChatInput 
          onSendMessage={handleSendMessage} 
          disabled={inputDisabled} 
        />
        
        <div className="mt-3 text-center">
          <p className="text-xs text-neutral-500">
            Powered by RAG Builder | <a href="#" className="text-primary hover:text-primary-light">Terms of Use</a>
          </p>
        </div>
      </div>
    </div>
  );
}
