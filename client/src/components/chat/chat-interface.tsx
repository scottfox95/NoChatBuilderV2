import { useState, useEffect, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { nanoid } from "nanoid";
import { apiRequest } from "@/lib/queryClient";
import { Message } from "@shared/schema";
import ChatMessage from "./chat-message";
import ChatInput from "./chat-input";
import { Loader } from "@/components/ui/loader";
import { Separator } from "@/components/ui/separator";
import aidifyIcon from "../../assets/aidify-logo.png";

interface ChatInterfaceProps {
  chatbotSlug: string;
  isPreview?: boolean;
  previewSystemPrompt?: string;
}

interface ChatbotPublicInfo {
  id: number;
  name: string;
  description: string;
  model: string;
  welcomeMessage?: string;
  welcomeMessages?: string[];
  suggestedQuestions?: string[];
}

interface ChatResponse {
  message: Message;
  sessionId: string;
}

export default function ChatInterface({ chatbotSlug, isPreview = false, previewSystemPrompt }: ChatInterfaceProps) {
  const [sessionId, setSessionId] = useState<string>("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputDisabled, setInputDisabled] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Get chatbot information
  const { data: chatbotInfo, isLoading: isLoadingChatbot, error: chatbotError } = useQuery<ChatbotPublicInfo>({
    queryKey: [`/api/public/chatbot/${chatbotSlug}`],
    enabled: !isPreview && !!chatbotSlug,
  });

  // Load previous messages if sessionId exists
  const { data: previousMessages } = useQuery<Message[]>({
    queryKey: [`/api/public/chatbot/${chatbotSlug}/messages/${sessionId}`],
    enabled: !isPreview && !!sessionId && !!chatbotSlug,
  });

  // State to hold the current streaming message
  const [streamingMessage, setStreamingMessage] = useState<Message | null>(null);
  const [eventSource, setEventSource] = useState<EventSource | null>(null);

  // Function to close event source
  const closeEventSource = () => {
    if (eventSource) {
      eventSource.close();
      setEventSource(null);
    }
  };

  // Message sending mutation
  const messageMutation = useMutation({
    mutationFn: async (message: string) => {
      if (isPreview) {
        try {
          // Make a direct call to OpenAI for preview mode
          const response = await apiRequest(
            "POST",
            "/api/preview/generate-response",
            { 
              message,
              systemPrompt: previewSystemPrompt || "You are a helpful AI assistant that responds to users in a friendly and informative way."
            }
          );
          const data = await response.json();
          
          return {
            message: {
              id: Date.now(),
              chatbotId: 0,
              sessionId: "preview",
              isUser: false,
              content: data.response,
              timestamp: new Date(),
            },
            sessionId: "preview"
          } as ChatResponse;
        } catch (error) {
          // Fallback if the API call fails
          return {
            message: {
              id: Date.now(),
              chatbotId: 0,
              sessionId: "preview",
              isUser: false,
              content: "I couldn't generate a response. This is a preview of your chatbot configuration. In the deployed version, responses will be generated by OpenAI.",
              timestamp: new Date(),
            },
            sessionId: "preview"
          } as ChatResponse;
        }
      } else {
        // Use SSE for streaming responses in real mode
        return new Promise<ChatResponse>((resolve, reject) => {
          // Close any existing event source
          closeEventSource();
          
          // Prepare the initial message placeholder for streaming
          const placeholderMsg: Message = {
            id: Date.now(),
            chatbotId: chatbotInfo?.id || 0,
            sessionId: sessionId || "",
            isUser: false,
            content: "",
            timestamp: new Date(),
          };
          
          // Set the streaming message
          setStreamingMessage(placeholderMsg);
          
          // Make the API request with streaming enabled
          const encodedSlug = encodeURIComponent(chatbotSlug);
          const baseUrl = `/api/public/chatbot/${encodedSlug}/messages`;
          const streamUrl = `/api/public/chatbot/${encodedSlug}/stream`;
          
          // First create the initial message
          fetch(baseUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
              message, 
              sessionId,
              stream: true  // Indicates this will be followed by a streaming request
            }),
          }).then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
          }).then(data => {
            // Now that we have the message ID, set up EventSource
            const streamingUrl = `${streamUrl}?sessionId=${sessionId}`;
            console.log("Connecting to SSE stream at:", streamingUrl);
            const es = new EventSource(streamingUrl);
            setEventSource(es);
            
            // Handle session event
            es.addEventListener('session', (event) => {
              const data = JSON.parse(event.data);
              if (!sessionId) {
                setSessionId(data.sessionId);
              }
            });
            
            // Handle content chunks
            es.addEventListener('chunk', (event) => {
              const data = JSON.parse(event.data);
              setStreamingMessage(prev => {
                if (!prev) return null;
                return {
                  ...prev,
                  content: prev.content + data.content
                };
              });
            });
            
            // Handle completion
            es.addEventListener('complete', (event) => {
              const data = JSON.parse(event.data);
              // Replace streaming message with the final message
              setStreamingMessage(null);
              resolve({
                message: data.message,
                sessionId: data.message.sessionId
              });
              // Close the connection
              es.close();
              setEventSource(null);
            });
            
            // Handle errors
            es.addEventListener('error', (event) => {
              console.error('SSE Error:', event);
              es.close();
              setEventSource(null);
              setStreamingMessage(null);
              reject(new Error('Error during streaming response'));
            });
            
          }).catch(error => {
            console.error('Fetch error:', error);
            setStreamingMessage(null);
            reject(error);
            
            // Fallback to non-streaming mode if SSE fails
            apiRequest(
              "POST", 
              `/api/public/chatbot/${chatbotSlug}/messages`, 
              { message, sessionId }
            ).then(response => {
              return response.json();
            }).then(data => {
              resolve(data);
            }).catch(err => {
              reject(err);
            });
          });
        });
      }
    },
    onSuccess: (data: ChatResponse) => {
      if (!sessionId) {
        setSessionId(data.sessionId);
      }
      
      // Add the final message to the chat
      setMessages(prev => {
        // Remove any streaming placeholder message
        const filteredMessages = prev.filter(m => m.id !== streamingMessage?.id);
        // Add the completed message
        return [...filteredMessages, data.message];
      });
    },
    onError: (error) => {
      // Add error message to chat
      setMessages(prev => [
        ...prev.filter(m => m.id !== streamingMessage?.id), // Remove streaming placeholder
        {
          id: Date.now(),
          chatbotId: 0,
          sessionId: sessionId || "error",
          isUser: false,
          content: "Sorry, there was an error processing your message. Please try again.",
          timestamp: new Date(),
        }
      ]);
    },
    onSettled: () => {
      setInputDisabled(false);
      setStreamingMessage(null); // Clear streaming message state
    }
  });

  // Initialize session on first load
  useEffect(() => {
    if (!isPreview && !sessionId) {
      setSessionId(nanoid());
    }
  }, [isPreview, sessionId]);

  // Update messages when previousMessages changes
  useEffect(() => {
    if (previousMessages && previousMessages.length > 0) {
      setMessages(previousMessages);
      // If there are previous messages, don't show suggestions
      setShowSuggestions(false);
    }
  }, [previousMessages]);

  // Add welcome message
  useEffect(() => {
    if (messages.length === 0) {
      if (isPreview) {
        // Default preview welcome messages (multiple in sequence)
        const previewMessages = [
          "Hello! I'm your chatbot assistant.",
          "I can help answer questions about your topic.",
          "Feel free to ask me anything!"
        ];
        
        const welcomeMessages = previewMessages.map((message, index) => ({
          id: index,
          chatbotId: 0,
          sessionId: "preview",
          isUser: false,
          content: message,
          timestamp: new Date(Date.now() + index * 100), // Slight timestamp difference to maintain order
        }));
        
        setMessages(welcomeMessages);
      } else {
        // Use all welcome messages in sequence
        if (chatbotInfo?.welcomeMessages && chatbotInfo.welcomeMessages.length > 0) {
          // Create an array of welcome messages
          const welcomeMessages = chatbotInfo.welcomeMessages.map((message, index) => ({
            id: index,
            chatbotId: chatbotInfo?.id || 0,
            sessionId: sessionId || "initial",
            isUser: false,
            content: message,
            timestamp: new Date(Date.now() + index * 100), // Slight timestamp difference to maintain order
          }));
          
          setMessages(welcomeMessages);
        } 
        // Fall back to single welcomeMessage if welcomeMessages isn't available
        else if (chatbotInfo?.welcomeMessage) {
          setMessages([
            {
              id: 0,
              chatbotId: chatbotInfo?.id || 0,
              sessionId: sessionId || "initial",
              isUser: false,
              content: chatbotInfo.welcomeMessage,
              timestamp: new Date(),
            }
          ]);
        } 
        // Default fallback
        else {
          setMessages([
            {
              id: 0,
              chatbotId: chatbotInfo?.id || 0,
              sessionId: sessionId || "initial",
              isUser: false,
              content: "Hello! How can I assist you today?",
              timestamp: new Date(),
            }
          ]);
        }
      }
    }
  }, [isPreview, messages.length, chatbotInfo, sessionId]);

  // Scroll to bottom when messages change
  useEffect(() => {
    // Only scroll to the message container, not the entire page
    if (messagesEndRef.current) {
      const messageContainer = messagesEndRef.current.parentElement;
      if (messageContainer) {
        messageContainer.scrollTop = messageContainer.scrollHeight;
      }
    }
  }, [messages]);

  const handleSendMessage = async (message: string) => {
    if (!message.trim() || inputDisabled) return;
    
    // Add user message to UI immediately
    const userMessage: Message = {
      id: Date.now(),
      chatbotId: chatbotInfo?.id || 0,
      sessionId: sessionId || "preview",
      isUser: true,
      content: message,
      timestamp: new Date(),
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputDisabled(true);
    
    // Hide suggestions after the first message is sent
    setShowSuggestions(false);
    
    try {
      await messageMutation.mutateAsync(message);
      // Note: We're not adding the message to the state here anymore
      // because the streaming message will become the final message
      // This avoids duplicate messages
    } catch (error) {
      // Error is handled in the mutation
    }
  };
  
  const handleSuggestedQuestionClick = (question: string) => {
    if (inputDisabled) return;
    handleSendMessage(question);
  };

  if (!isPreview && isLoadingChatbot) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader size="lg" withText text="Loading chatbot..." />
      </div>
    );
  }

  if (!isPreview && chatbotError) {
    return (
      <div className="flex flex-col items-center justify-center h-full p-4 text-center">
        <h3 className="text-lg font-semibold text-red-500 mb-2">Chatbot not found</h3>
        <p className="text-neutral-400">The chatbot you're looking for doesn't exist or has been removed.</p>
      </div>
    );
  }

  // Group messages by sender for UI rendering
  const processedMessages = messages.map((message, index) => {
    // Determine if the next message is from the same sender
    const nextMessage = messages[index + 1];
    const isLastInGroup = !nextMessage || nextMessage.isUser !== message.isUser;
    
    // Determine if the previous message is from the same sender
    const prevMessage = messages[index - 1];
    const isFirstInGroup = !prevMessage || prevMessage.isUser !== message.isUser;
    
    // Only show avatar for first message in a group
    const showAvatar = isFirstInGroup;
    
    return {
      message,
      showAvatar,
      isLastInGroup,
      isFirstInGroup
    };
  });
  
  // Auto-scrolling logic
  const [isNearBottom, setIsNearBottom] = useState(true);
  const [showNewMessageToast, setShowNewMessageToast] = useState(false);
  
  // Debounce function for scroll events
  const debounce = (fn: Function, ms = 16) => {
    let timeoutId: ReturnType<typeof setTimeout>;
    return function(...args: any[]) {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => fn.apply(this, args), ms);
    };
  };
  
  // Check scroll position
  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
    const distanceFromBottom = scrollHeight - scrollTop - clientHeight;
    setIsNearBottom(distanceFromBottom < 100); // within 100px of bottom
    
    // If user scrolls up and we are showing the toast, hide it when they scroll to bottom
    if (distanceFromBottom < 50 && showNewMessageToast) {
      setShowNewMessageToast(false);
    }
  };
  
  // Scroll to bottom function
  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
      setShowNewMessageToast(false);
    }
  };
  
  // When new messages arrive, auto-scroll if we're near the bottom
  useEffect(() => {
    if (isNearBottom && messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'auto' });
    } else if (!isNearBottom && (messages.length > 0 && messages[messages.length - 1]?.isUser === false)) {
      // If we have new messages from the bot and we're not at the bottom
      setShowNewMessageToast(true);
    }
  }, [messages, isNearBottom]);

  return (
    <div className="flex flex-col h-full overflow-hidden bg-white rounded-lg shadow border border-gray-200 safe-area-inset">
      {/* Chat Header */}
      <div className="bg-[#0050F5] py-3 px-4 flex items-center justify-between sticky top-0 z-10 shadow-sm">
        <div className="flex items-center">
          <div className="bg-white p-1.5 rounded-full mr-2.5 flex items-center justify-center">
            <img src={aidifyIcon} alt="Aidify" className="w-5 h-5" />
          </div>
          <div>
            <h2 className="font-semibold text-white text-base leading-tight">
              {isPreview ? "Chatbot Preview" : chatbotInfo?.name}
            </h2>
            {!isPreview && chatbotInfo?.description && (
              <p className="text-xs text-white/80 line-clamp-1 mt-0.5">{chatbotInfo.description}</p>
            )}
          </div>
        </div>
        <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
          <span className="w-1.5 h-1.5 bg-green-500 rounded-full mr-1"></span>
          Online
        </span>
      </div>

      {/* Chat Messages */}
      <div 
        className="flex-1 overflow-y-auto px-3 py-2 custom-scrollbar relative bg-white"
        onScroll={debounce(handleScroll)}
      >
        {/* Message date separators would go here */}
        
        {processedMessages.map(({ message, showAvatar, isLastInGroup, isFirstInGroup }) => (
          <ChatMessage 
            key={message.id} 
            message={message} 
            chatbotName={chatbotInfo?.name}
            showAvatar={showAvatar}
            isLastInGroup={isLastInGroup}
            isFirstInGroup={isFirstInGroup}
          />
        ))}
        
        {/* Streaming Message (if any) */}
        {streamingMessage && (
          <ChatMessage 
            key="streaming" 
            message={streamingMessage} 
            chatbotName={chatbotInfo?.name}
            isStreaming={true}
            showAvatar={!messages.length || messages[messages.length - 1].isUser}
            isFirstInGroup={!messages.length || messages[messages.length - 1].isUser}
            isLastInGroup={true}
          />
        )}
        
        <div ref={messagesEndRef} />
        
        {/* Loading indicator for response (shows only when not streaming) */}
        {inputDisabled && messageMutation.isPending && !streamingMessage && (
          <div className="flex items-start">
            <div className="flex-shrink-0 bg-[#0050F5] w-9 h-9 rounded-full flex items-center justify-center">
              <img src={aidifyIcon} className="animate-pulse w-5 h-5" alt="Aidify" />
            </div>
            <div className="ml-2 bg-[#0050F5]/10 rounded-[16px] py-2 px-3">
              <div className="flex space-x-1.5">
                <div className="w-1.5 h-1.5 rounded-full bg-[#0050F5] animate-bounce" style={{ animationDelay: "0ms" }}></div>
                <div className="w-1.5 h-1.5 rounded-full bg-[#0050F5] animate-bounce" style={{ animationDelay: "150ms" }}></div>
                <div className="w-1.5 h-1.5 rounded-full bg-[#0050F5] animate-bounce" style={{ animationDelay: "300ms" }}></div>
              </div>
            </div>
          </div>
        )}
        
        {/* New Messages Toast */}
        {showNewMessageToast && (
          <button 
            onClick={scrollToBottom}
            className="fixed bottom-[80px] left-1/2 transform -translate-x-1/2 bg-[#0050F5] text-white px-4 py-2 rounded-full shadow-lg flex items-center gap-1.5 text-sm animate-fade-in-up z-10"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M12 19V5M5 12l7 7 7-7" />
            </svg>
            New messages
          </button>
        )}
      </div>
      
      {/* Suggested Questions Section */}
      {showSuggestions && 
        (!isPreview ? 
          (chatbotInfo?.suggestedQuestions && chatbotInfo.suggestedQuestions.length > 0) : 
          isPreview) && (
        <div className="px-3 py-2 border-t border-gray-200 bg-gray-50">
          <p className="text-xs font-medium text-indigo-600 mb-1.5 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10"/></svg>
            Suggested questions:
          </p>
          <div className="flex flex-wrap gap-1.5">
            {isPreview ? (
              // Show sample suggested questions in preview mode
              <>
                <button 
                  onClick={() => handleSuggestedQuestionClick("How long is my surgery going to take?")}
                  className="px-2.5 py-1 text-xs bg-white hover:bg-gray-100 text-gray-800 rounded-full border border-gray-300 transition-colors shadow-sm"
                >
                  How long is my surgery going to take?
                </button>
                <button 
                  onClick={() => handleSuggestedQuestionClick("Tell me about the MAKO Robotic Technique")}
                  className="px-2.5 py-1 text-xs bg-white hover:bg-gray-100 text-gray-800 rounded-full border border-gray-300 transition-colors shadow-sm"
                >
                  Tell me about the MAKO Robotic Technique
                </button>
                <button 
                  onClick={() => handleSuggestedQuestionClick("Why do I need dental clearance?")}
                  className="px-2.5 py-1 text-xs bg-white hover:bg-gray-100 text-gray-800 rounded-full border border-gray-300 transition-colors shadow-sm"
                >
                  Why do I need dental clearance?
                </button>
              </>
            ) : (
              // Show actual suggested questions from the chatbot
              chatbotInfo?.suggestedQuestions?.map((question, index) => (
                <button 
                  key={index}
                  onClick={() => handleSuggestedQuestionClick(question)}
                  className="px-2.5 py-1 text-xs bg-white hover:bg-gray-100 text-gray-800 rounded-full border border-gray-300 transition-colors shadow-sm"
                >
                  {question}
                </button>
              ))
            )}
          </div>
        </div>
      )}
      
      {/* Chat Input */}
      <div className="px-3 py-2.5 border-t border-gray-200 bg-white">
        <ChatInput 
          onSendMessage={handleSendMessage} 
          disabled={inputDisabled} 
        />
        
        <div className="mt-1.5 text-center">
          <p className="text-[10px] text-gray-500">
            Powered by Aidify | AI-powered assistance
          </p>
        </div>
      </div>
    </div>
  );
}
